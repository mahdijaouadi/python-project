steps:
- id: grant-permissions
  name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
      if gcloud projects get-iam-policy ${PROJECT_ID} --format=json | jq -e '.bindings[] | select(.role=="roles/artifactregistry.reader") | .members[] | contains("serviceAccount:pigen-testing2@${PROJECT_ID}.iam.gserviceaccount.com")' > /dev/null; then
        echo "ERROR: IAM binding already exists!"
        exit 1  # This forces the pipeline to fail
      else
        gcloud projects add-iam-policy-binding ${PROJECT_ID} \
        --member="serviceAccount:pigen-testing2@${PROJECT_ID}.iam.gserviceaccount.com" \
        --role="roles/artifactregistry.reader" \
        --condition=None
      fi
- id: build
  name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    docker build -t europe-west1-docker.pkg.dev/${PROJECT_ID}/pi-gen-testing/app-python:${SHORT_SHA} .
    docker push europe-west1-docker.pkg.dev/${PROJECT_ID}/pi-gen-testing/app-python:${SHORT_SHA}

- id: deploy
  name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: sh
  args:
  - '-c'
  - | 
      echo "*********"
      echo "europe-west1-docker.pkg.dev/${PROJECT_ID}/pi-gen-testing/app-python:${SHORT_SHA}"
      echo "*********"

      gcloud run deploy python-project \
      --region=europe-west1 \
      --image=europe-west1-docker.pkg.dev/${PROJECT_ID}/pi-gen-testing/app-python:${SHORT_SHA}

logsBucket: 'gs://aidodev_cb_logs/python_pipeline/${BUILD_ID}'
options:
  logging: GCS_ONLY
